1.归并排序
void Merge(Sqlist &L,int low,int mid,int high){
    Sqlist TR;
    int left_low=low;
    int right_low=mid +1;
    
    int k;
    for(k=1;left_low<=mid&&right_low<=high;k++){
        if(L.[r].left_low<=L.[r].right_low){
            TR.r[k]=L.[r].left_low;
            left_low++;
        }else{
            TR.r[k]=L.[r].right_low;
            right_low++;
        }
    }

    if(left_low<=mid){
        for(int i=left_low;i<=mid;i++){
            TR.[k]=L.[i];
            k++
        }
    }
    if(right_low<=high){
        for(int i=right_low;i<=high;i++){
            TR.[k]=L.[i];
            k++
        }
    }

    int x=1;
    for(int i=low;i<=high;i++){
        L.r[i]=TR.[x];
        x++;
    }
}

void MSort(Sqlist &L,int low,int high){
    int mid;
    if(low<high){
        mid=(low+high)/2;
        MSort(L,low,mid);
        MSort(L,mid+1,high);
        Merge(L,low,mid,high);
    }
    return;
}

void MergeSort(Sqlist,&L){
    MSort(L,1,L.lenth);
}

2.堆排序
void HeapAdjust(Sqlist &H,int i,int m){
    H.r[0]=H.r[i];
    for(int j=2*i;j<=m;j*=2){
        if(j<m&&H.r[j].key<H.r[j+1].key) j++;
        if(H.r[0].key>=H.r[j].key) break;
        H.r[i]=H.r[j];
        i=j;
    }
    H.r[i]=H.r[0];
}

void HeapSort(Sqlist &H){
    int mid=H.lenth/2;
    for(int i=mid;i>0;i--){
        HeapAdjust(H,i,H.lenth)；
    }
    for(int i=L.lenth;i>1;i--){
        H.r[0]=H.r[i];
        H.r[i]=H.r[1];
        H.r[1]=H.r[0];
        HeapAdjust(H,1,i-1);
    }
}

3.简单选择排序
void SelectSort(Sqlist &L){
    for(int i=1;i<=L.lenth;i++){
        int min=i;
        for(int j=i+1;j<=L.lenth;j++){
            if(L.r[j].key<L.r[min].key)
            min=j;
        }
        if(min!=i){
            L.r[0]=L.r[i];
            L.r[i]=L.r[min];
            L.r[min]=L.r[0];

        }
        
    }

}

4.快速排序
int Partition(Sqlist &L,int low, int high){
    int pivokey=L.r[low].key;
    L.r[0]=L.r[low];
    while(low<high){
        while(low<high&&L.r[high].key>=pivokey)
        high--;
        L.r[low]=L.r[high];
        while(low<high&&L.r[low].key<=pivokey)
        low++;
        L.r[high]=L.r[low];

    }
    L.r[low]=L.r[0];
    return low;
}

void QSort(Sqlist &L,int low ,int high){
    if(low<high){
        int pivokey=Partition(L,low,high);
        QSort(L,low,pivokey-1);
        QSort(L,pivokey+1,high);

    }
}

void QuickSoet(Sqlist &L){
    QSort(L,1,L.lenth);
}


5.折半查找
BInsertSort(Sqlist &L){
    for(int i=2;i<=L.lenth;i++){
        int low=1,high=i-1;
        while(low<=high){
            mid=(high-low)/2+low;
            if(L.r[i].key<L.r[mid].key)
            high=mid-1;
            else
            low=mid+1;
        }
        for(int j=i-1;j>=high+1;j--){
            L.r[j+1]=L.r[j];
        }
        L.r[high+1]=L.r[0];
    }
}

6.表插入排序
void SLinkList(Sqlist &L){
    L.r[0].next=1;
    L.r[1].next=0;
    for(int i=2;i<=L.lenth;i++){
        for(int j=0;k=L.r[j].next;L.r[k].key<=L.r[i].key;j=k;k=L.r[k].next);
        L.r[j].next=L.r[i];
        L.r[i].next=L.r[k];
    }

}

void SelectSort(Sqlist &L){
    int p=L.r[0].next;
    for(int i=1;i<L.lenth;i++){
        while(p<i){
            p=L.r[p].next;
        }
        int q=L.r[p].next;
        if(p!=i){
            L.r[0]=L.r[i];
            L.r[r]=L.r[p];
            L.r[p]=L.r[0];
            L.r[i].next=p;
        }
        p=q;
    }
}

二插排序树

typedef struct BiTNode{
    ElemType data;
    struct BiTNode *lchild,*rchild;
}BiTNode,*Bitree;

Bitree SearchTree(Bitree T,Bitree &p,ElemType key){
    if(!T){
        return NULL;
    }else{
        if(key<T->data){
            p=T;
            SearchTree(T->lchild,p,key);
        }
        else if(key>T->data){
            p=T;
            SearchTree(T->rchild,p,key);
        }else
        return T;
        
    }
}

void InsertTree(Bitree &T,ElemType key){
    if(!T){
        T=new BiTNode;
        T->data=key;
        T->lchild=NULL;
        T->rchild=NULL;
    }else{
        if(key<T->data)
        InsertTree(T->lchild,key);
        else
        InsertTree(T->rchild,key);
    }
}

void CreatTree(Bitree &T){
    cout<<"输入初始化元素个数";
    int n;
    cin>>n;
    cout<<"输入初始化元素key";
    for(int i=0;i<n;i++){
        int key;
        cin>>key;
        InsertTree(T,key);
    }
}

void DeleteTree(Bitree &T,int key){
    Bitree parent=NULL;
    if(!SearchTree(T,parent,key))
    return;
    else{
        Bitree p=SearchTree(T,parent,key);
        if(p->lchild&&p->rchild){
            Bitree q=p;
            Bitree s=p->lchild;
            while(s->rchild){
                q=s;
                s=s->rchild;
            }
            if(q!=p){
                p->data=s->data;
                q->rchild=s->lchild;
                delete s;
            }else{
                p->data=s->data;
                q->lchild=s->lchild;
                delete s; 
            }
        }else{
            Bitree q=p->lchild?p->lchild:p->rchild;
            if(!parent){
                T=q;
                delete p;
            }else{
                if(parent->lchild==p){
                    parent->lchild=q;
                    delete p;
                }else{
                    parent->rchild=q;
                    delete p;
                }
            }
        }
    }
}

void PrintTree(Bitree T){
    if(T){
        PrintTree(T->lchild);
        cout<<T->data<<" ";
        PrintTree(T->rchild);
    }
}

int main(){
    Bitree t;
    CreatTree(t);
    PrintTree(t);
    cout<<"输入你想要删除的元素";
    int key;
    cin>>key;
    DeleteTree(t,key);
    PrintTree(t);
}


图的遍历

#include<iostream>
#include<queue>
using namespace std;

#define max 30
 int visited[max];
typedef char ElemType;

typedef struct ArcNode{
    int adjvex;
    struct ArcNode *nextarc;
}ArcNode,*ArcList;

typedef struct{
    ElemType  data;
    ArcList firstarc;
}VNode;

typedef struct{
    VNode vertices[max];
    int vexnum;
    int arcnum;
}Graph;

int Located(Graph G,ElemType e){
    for(int i=1;i<=G.vexnum;i++){
        if(e==G.vertices[i].data)
        return i;
    }
    // return NULL;
}

void CreatGraph(Graph &G){
    int i,j;
    ElemType a,b;
    cout<<"分别输入图的顶多数和边数"<<endl;
    cin>>G.vexnum>>G.arcnum;
    cout<<"输入"<<G.vexnum<<"个顶点的data"<<endl;
    for(int i=1;i<=G.vexnum;i++){
        cin>>G.vertices[i].data;
        G.vertices[i].firstarc=NULL;
    }
   
    for(int k=1;k<=G.arcnum;k++){
        cout<<"输入边"<<k<<"两个顶点的data"<<endl;
        cin>>a>>b;
        i=Located(G,a);
        j=Located(G,b);
        ArcList pi=new ArcNode;
        pi->adjvex=j;
        pi->nextarc=G.vertices[i].firstarc;
        G.vertices[i].firstarc=pi;
        ArcList pj=new ArcNode;
        pj->adjvex=i;
        pj->nextarc=G.vertices[j].firstarc;
        G.vertices[j].firstarc=pj;
    }
    }

void DFS(Graph G,int v){
    visited[v]=true;
    cout<<G.vertices[v].data<<" ";
    for(ArcList vi=G.vertices[v].firstarc;vi;vi=vi->nextarc){
        if(!visited[vi->adjvex])
        DFS(G,vi->adjvex);
    }
}

void DFSTravers(Graph G,int v){
    
    // char visited[G.vexnum+1];
    for(int i=1;i<=G.vexnum;i++){
        visited[i]=false;
    }

    for(int i=1;i<=G.vexnum;i++){
        if(!visited[v])
        DFS(G,v);
    }
}



void BFSTravers(Graph G,int v){
    queue<VNode> q;
    VNode p;
    char visited[G.vexnum+1];
    for(int i=1;i<=G.vexnum;i++){
        visited[i]=false;
    }

    for(int i=1;i<=G.vexnum;i++){
        if(!visited[v]){
            visited[v]=true;
            q.push(G.vertices[v]);
            while(!q.empty()){
                p=q.front();
                cout<<p.data<<" ";
                q.pop();
                for(ArcList vi=p.firstarc;vi;vi=vi->nextarc){
                if(!visited[vi->adjvex]){
                    visited[vi->adjvex]=true;
                    q.push(G.vertices[vi->adjvex]);
                }
                    
                }
            }
        }
    }
}

int main(){
    Graph g;
    CreatGraph(g);
    ElemType e;
    cout<<"输入起点的data"<<endl;
    cin>>e;
    int v=Located(g,e);
    cout<<"深度遍历"<<endl;
    DFSTravers(g,v);
    cout<<"广度遍历"<<endl;
    BFSTravers(g,v);
}